import random

def calculate_conflicts(board):
    """Calculate the number of attacking queen pairs."""
    conflicts = 0
    n = len(board)
    for i in range(n):
        for j in range(i + 1, n):
            # Same row
            if board[i] == board[j]:
                conflicts += 1
            # Same diagonal
            elif abs(board[i] - board[j]) == abs(i - j):
                conflicts += 1
    return conflicts

def generate_neighbors(board):
    """Generate all possible neighbor states by moving one queen per column."""
    neighbors = []
    n = len(board)
    for col in range(n):
        for row in range(n):
            if board[col] != row:
                new_board = board.copy()
                new_board[col] = row
                neighbors.append(new_board)
    return neighbors

def hill_climbing(n):
    """Perform hill climbing to solve N-Queens."""
    current_board = [random.randint(0, n - 1) for _ in range(n)]
    current_h = calculate_conflicts(current_board)
    steps = 0

    while True:
        neighbors = generate_neighbors(current_board)
        neighbor_h_values = [calculate_conflicts(nb) for nb in neighbors]
        min_h = min(neighbor_h_values)
        best_neighbor = neighbors[neighbor_h_values.index(min_h)]
        steps += 1

        if min_h >= current_h:  # No better neighbor
            break

        current_board, current_h = best_neighbor, min_h

        if current_h == 0:
            break

    return current_board, current_h, steps

def print_board(board):
    """Display the chessboard configuration."""
    n = len(board)
    for row in range(n):
        line = ""
        for col in range(n):
            line += "Q " if board[col] == row else ". "
        print(line)
    print()

# Example: Solve 4-Queens using Hill Climbing
if __name__ == "__main__":
    n = 4
    board, h, steps = hill_climbing(n)
    print(f"Final heuristic (conflicts): {h}")
    print(f"Steps taken: {steps}\n")
    print("Final Board Configuration:")
    print_board(board)
